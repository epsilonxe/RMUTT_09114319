# **Workshop: Breadth-First Search (BFS) in Practice**  

### **Objective**
- Understand **how BFS explores graphs level by level**.
- Implement BFS to solve **real-world problems**.
- Reinforce **queue-based traversal and shortest-path applications**.
- Solve **increasingly challenging problems**, ensuring deep comprehension.

---

## **Problem 1: Implement BFS Traversal (20 min)**  
### **Problem Statement**  
Given an **undirected graph**, implement **BFS traversal** starting from a given node and print the order in which the nodes are visited.

### **Example Input:**
```python
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}
start_node = 'A'
```
### **Example Output:**
```python
['A', 'B', 'C', 'D', 'E', 'F']
```

### **Hint**
- Use a **queue (FIFO)** for traversal.
- Maintain a **visited set** to avoid re-exploration.

### **Suggested Solution**
```python
from collections import deque

def bfs_traversal(graph, start):
    queue = deque([start])
    visited = set([start])
    order = []

    while queue:
        node = queue.popleft()
        order.append(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)
    
    return order

# Testing
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}
print(bfs_traversal(graph, 'A'))  # Output: ['A', 'B', 'C', 'D', 'E', 'F']
```

---

## **Problem 2: Find the Shortest Path Using BFS (30 min)**  
### **Problem Statement**  
Modify the **BFS traversal** to find the **shortest path** between two nodes in an **unweighted graph**.

### **Example Input:**
```python
start = 'A'
goal = 'F'
```
### **Example Output:**
```python
['A', 'C', 'F']
```

### **Hint**
- Instead of just **visiting nodes**, track the **path taken**.
- Use a **dictionary** to store **parent nodes**.

### **Suggested Solution**
```python
def bfs_shortest_path(graph, start, goal):
    queue = deque([(start, [start])])
    visited = set([start])

    while queue:
        node, path = queue.popleft()
        if node == goal:
            return path
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, path + [neighbor]))
    
    return None  # No path found

# Testing
print(bfs_shortest_path(graph, 'A', 'F'))  # Output: ['A', 'C', 'F']
```

---

## **Problem 3: BFS for Solving a Maze (30 min)**  
### **Problem Statement**  
You are given a **2D grid representing a maze**, where:
- `0` represents an **open path**.
- `1` represents a **wall**.
- The **goal** is to find the shortest path from the **start position to the end position** using **BFS**.

### **Example Input:**
```python
maze = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [1, 1, 0, 1, 0],
    [0, 0, 0, 0, 0]
]
start = (0, 0)
end = (4, 4)
```
### **Example Output:**
```python
Shortest path length: 8
```

### **Hint**
- Represent the maze as a **graph** where each cell is a **node**.
- Use **BFS** to find the shortest path.
- Only move **up, down, left, right** if within bounds.

### **Suggested Solution**
```python
def bfs_maze(maze, start, end):
    rows, cols = len(maze), len(maze[0])
    queue = deque([(start, 0)])
    visited = set([start])
    
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right
    
    while queue:
        (x, y), steps = queue.popleft()
        if (x, y) == end:
            return steps
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 0 and (nx, ny) not in visited:
                visited.add((nx, ny))
                queue.append(((nx, ny), steps + 1))
    
    return -1  # No path found

# Testing
print("Shortest path length:", bfs_maze(maze, start, end))  # Output: 8
```

---

## **Problem 4: Social Network Friend Suggestion (25 min)**  
### **Problem Statement**  
Given a **social network graph**, implement **BFS-based friend suggestion**.  
- **Input**: A graph where each node represents a person.
- **Output**: Suggest **friends of friends** who are **not already friends**.

### **Example Input:**
```python
social_graph = {
    'Alice': ['Bob', 'Claire'],
    'Bob': ['Alice', 'Anuj'],
    'Claire': ['Alice', 'Jonny'],
    'Anuj': ['Bob'],
    'Jonny': ['Claire'],
    'Peggy': []
}
```
### **Example Output:**
```python
Suggested friends for Alice: {'Jonny', 'Anuj'}
```

### **Hint**
- Use **BFS** to find **nodes exactly 2 levels away**.
- Exclude **direct friends**.

### **Suggested Solution**
```python
def suggest_friends(graph, person):
    queue = deque([(person, 0)])
    visited = set([person])
    direct_friends = set(graph.get(person, []))
    suggestions = set()

    while queue:
        node, level = queue.popleft()
        if level == 2:
            suggestions.add(node)
        elif level < 2:
            for friend in graph.get(node, []):
                if friend not in visited and friend not in direct_friends:
                    visited.add(friend)
                    queue.append((friend, level + 1))

    return suggestions

# Testing
print("Suggested friends for Alice:", suggest_friends(social_graph, 'Alice'))  # Output: {'Jonny', 'Anuj'}
```

---

### **Revised Problem 1: Exploring Connected Countries Using BFS**  

### **Problem Statement**  
A **graph** consists of **nodes (vertices)** representing entities and **edges** representing connections between them.  
In this problem, each **node represents a country**, and an edge between two nodes means they share a **direct land border**.  

**Your Task:**  
- Implement **BFS** to explore a country’s neighboring countries level by level.
- Given a starting country, return the **order in which countries are visited**.
- Assume the graph is **undirected** (borders are bidirectional).

---

### **Example Graph (Countries and Borders)**
Consider the following **graph** representing neighboring countries:

```
        Canada
       /     \
      USA --- Mexico
       |       |
     Brazil -- Argentina
```

- **Edges:** `{Canada-USA, USA-Mexico, USA-Brazil, Mexico-Argentina, Brazil-Argentina}`
- **BFS from 'Canada' should visit nodes in level order**:  
  **`Canada → USA → Mexico → Brazil → Argentina`**

---

### **Example Input (Graph as an Adjacency List)**
```python
borders = {
    'Canada': ['USA'],
    'USA': ['Canada', 'Mexico', 'Brazil'],
    'Mexico': ['USA', 'Argentina'],
    'Brazil': ['USA', 'Argentina'],
    'Argentina': ['Mexico', 'Brazil']
}
start_country = 'Canada'
```

### **Example Output**
```python
['Canada', 'USA', 'Mexico', 'Brazil', 'Argentina']
```

---

### **Explanation of BFS Traversal**
- Start at **'Canada'** → add to **queue**.
- Visit all direct neighbors first: **'USA'**.
- Move to the **next level** and visit all unvisited neighbors: **'Mexico', 'Brazil'**.
- Finally, visit **'Argentina'**.

### **How BFS Works (Step-by-Step Execution)**

| Step | Queue Content       | Visited Countries |
|------|--------------------|-------------------|
| 1    | `['Canada']`       | `[]`              |
| 2    | `['USA']`          | `['Canada']`      |
| 3    | `['Mexico', 'Brazil']` | `['Canada', 'USA']`  |
| 4    | `['Brazil', 'Argentina']` | `['Canada', 'USA', 'Mexico']` |
| 5    | `['Argentina']`     | `['Canada', 'USA', 'Mexico', 'Brazil']` |
| 6    | `[]` (Empty)       | `['Canada', 'USA', 'Mexico', 'Brazil', 'Argentina']` |

---

### **Hint**
- Use a **queue (FIFO: First-In, First-Out)** to explore countries **level by level**.
- Maintain a **visited set** to track explored countries.
- Visit **all directly connected countries before exploring further neighbors**.

---

### **Suggested Solution**
```python
from collections import deque

def bfs_explore_countries(graph, start):
    queue = deque([start])
    visited = set([start])
    order = []

    while queue:
        country = queue.popleft()
        order.append(country)
        for neighbor in graph[country]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)
    
    return order

# Testing
borders = {
    'Canada': ['USA'],
    'USA': ['Canada', 'Mexico', 'Brazil'],
    'Mexico': ['USA', 'Argentina'],
    'Brazil': ['USA', 'Argentina'],
    'Argentina': ['Mexico', 'Brazil']
}

print(bfs_explore_countries(borders, 'Canada'))  
# Output: ['Canada', 'USA', 'Mexico', 'Brazil', 'Argentina']
```

---

### **Revised Problem 2: Finding the Shortest Path Between Countries Using BFS**  

### **Problem Statement**  
In this problem, you are given a **map of countries**, where each country is connected to its **neighboring countries by land**.  
Your task is to **find the shortest route from one country to another** using **BFS**.  

**Rules:**  
- You can only **travel between directly connected countries** (i.e., neighbors).  
- Your goal is to **return the shortest path** (sequence of countries) from the **start country to the target country**.  
- If no path exists, return `None`.

---

### **Example Graph (Countries and Borders)**
Consider the following **map** of connected countries:

```
        Canada
       /     \
      USA --- Mexico
       |       |
     Brazil -- Argentina
```

- **Edges:** `{Canada-USA, USA-Mexico, USA-Brazil, Mexico-Argentina, Brazil-Argentina}`
- **Finding the shortest path from 'Canada' to 'Argentina' should return**:  
  **`Canada → USA → Mexico → Argentina`**  
  (instead of exploring unnecessary paths).

---

### **Example Input**
```python
borders = {
    'Canada': ['USA'],
    'USA': ['Canada', 'Mexico', 'Brazil'],
    'Mexico': ['USA', 'Argentina'],
    'Brazil': ['USA', 'Argentina'],
    'Argentina': ['Mexico', 'Brazil']
}

start_country = 'Canada'
destination_country = 'Argentina'
```

### **Example Output**
```python
['Canada', 'USA', 'Mexico', 'Argentina']
```

---

### **Explanation of BFS Path Finding**
1. **Start from 'Canada'**, add it to the queue: `['Canada']`
2. Explore neighbors:  
   - **Visit 'USA'**, update path → `['Canada', 'USA']`
3. Explore next level:  
   - **Visit 'Mexico' and 'Brazil'** → `['Canada', 'USA', 'Mexico']`  
4. Finally, reach **'Argentina'** → **Shortest path found!**

---

### **Hint**
- Modify BFS to **track paths**, not just visited countries.
- Instead of just **storing countries in a queue**, **store the path taken**.
- When the **destination is reached**, return the path.

---

### **Suggested Solution**
```python
from collections import deque

def bfs_shortest_path(graph, start, goal):
    queue = deque([(start, [start])])  # Store country and path
    visited = set([start])

    while queue:
        country, path = queue.popleft()
        if country == goal:
            return path  # Return shortest path
        for neighbor in graph[country]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append((neighbor, path + [neighbor]))
    
    return None  # No path found

# Testing
borders = {
    'Canada': ['USA'],
    'USA': ['Canada', 'Mexico', 'Brazil'],
    'Mexico': ['USA', 'Argentina'],
    'Brazil': ['USA', 'Argentina'],
    'Argentina': ['Mexico', 'Brazil']
}

print(bfs_shortest_path(borders, 'Canada', 'Argentina'))  
# Output: ['Canada', 'USA', 'Mexico', 'Argentina']
```

---

### **Key Learning Points**
✅ **BFS finds the shortest path in an unweighted graph**.  
✅ **Using a queue to track both the country and the path taken**.  
✅ **Ensuring the shortest route is returned instead of unnecessary paths**.

---

### **Final Notes**
This **revision aligns Problem 2 with Problem 1**, using **countries as graph nodes** and **real-world travel scenarios**. Let me know if you need **further refinements!** 🚀
